---
- name: install the tomcat on both ubuntu and centos
  hosts: all
  become: yes 
  tasks: 
    - name: insall the java on both
      ansible.builtin.package:
        name: "{{ java_package_name }}"
        state: present
    - name: create group
      ansible.builtin.group:
        name: "{{ gropu_name }}"
        state: present     
    - name: create a tomcat user
      ansible.builtin.user:
        name: "{{ user_name }}"
        create_home: yes
        group: "{{ gropu_name }}"
        home: "{{ user_home }}"
        shell: "{{ user_shell }}"
        state: present
    - name: "extract tomcat {{ tomcat_version }}"
      ansible.builtin.unarchive:
        src: "https://dlcdn.apache.org/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
        remote_src: yes
        dest: "{{ user_home }}"
    - name: link in the file
      ansible.builtin.file:
        src: "{{ user_home }}/apache-tomcat-{{ tomcat_version }}"
        path: "{{ user_home }}/latest"    
        owner: "{{ user_name }}"
        state: link
        mode: '0777'
    - name: chown
      ansible.builtin.file:
        dest: "{{ user_home }}"
        recurse: true
        group: "{{ gropu_name }}"
        owner: "{{ user_name }}"
        state: directory
        mode: '0777'
    - name: shell file
      ansible.builtin.command: "sudo sh -c 'chmod +x {{ user_home }}/latest/bin/*.sh'"    
    - name: Create a systemd unit file in ubuntu
      ansible.builtin.copy:
        src: ubuntu.tomcat.service
        dest: /etc/systemd/system/tomcat.service
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      when: ansible_facts['distribution'] == "Ubuntu"
    - name: Create a systemd unit file in centos
      ansible.builtin.copy:
        src: centos.tomcat.service
        dest: /etc/systemd/system/tomcat.service
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      when: ansible_facts['distribution'] == "CentOS"
    - name: create systemd fiels
      ansible.builtin.systemd:
        name: "{{ tomcat_service_name }}"
        daemon_reload: true
        enabled: true
        state: restarted      
        